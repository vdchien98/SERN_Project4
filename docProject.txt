- Dự án này cần các công nghệ :
+ React
+ Nodejs/Express
+ REST API
+ MySql
+ SequelizeJS ( quản lý và thực hiện các truy vấn trong cơ sở dữ liệu )
- Các bước thực hiện dự án :
1. Tạo 2 phần client và server
2. Khởi tạo server : 
* npm init 
* Cài những thư viện thiết yếu cho server(backend): express , cors ( cho phép tạo kết nối giữa giao diện người dùng trong phản ứng với máy chủ , ko cài sẽ gặp lỗi ), mysql2
* Tạo file index.js : file chạy đầu tiền của backend 
+ 
const express = require('express');
const app = express();

app.listen(3001, () => {
    console.log('Hello your server is running on port 3001');
});

+ Cài thêm nodemon sau đó cầu hình trong package : "start": "nodemon index.js"

* Bắt đầu kết nối với database: 
+ sử dụng SequelizeJS (framwork sql nổi tiếng )để viết sql dễ dàng ---> cài đặt npm install sequelize sequelize-cli 
+ Khi cài xong chạy dòng lệnh npx sequelize-cli init ( để tạo ra kho chứa ) sẽ tạo ra các thư mục sau : 
. config, chứa tệp cấu hình, cho CLI biết cách kết nối với cơ sở dữ liệu
. models, chứa tất cả các mô hình cho dự án của bạn
. migrations, chứa tất cả các tệp di chuyển
. seeders, chứa tất cả các tệp hạt giống
+ Tạo file Posts.js trong models ( tạo 1 bảng là Posts.js trng database). Viết mã tạo bảng trong này 
+ Bắt đầu kết nối để tạo bảng : 
. Tạo kết nối giữa sequelize vs cơ sở dữ liệu trong file config :  "development": {
        "username": "root",
        "password": null,
        "database": "sern4",
        "host": "localhost",
        "port": 3307,
        "dialect": "mysql"
    },

* Bắt đầu tạo các tuyến đường để viết Api 
- Trong server : Tạo 1 folder là routes

* Tạo kết nối với client từ backend :
- chú ý : npx create-react-app . --> chỉ tạo luôn 1 ứng dụng react trong 1 ứng dụng mình đã có sẵn 
- Dung thư viện axios để kết nối với api từ backend gửi đến 
- cài sass , bootstrap ,....
- sử dụng hook là useEffect
- sẽ cài thư viện npm i react-router-dom để phân các router bên react . 
Trong 'react-router-dom' cos những loại này (possible exports: BrowserRouter, HashRouter, Link, MemoryRouter, NavLink, Navigate, NavigationType, Outlet, Route, Router, Routes, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, createPath, createRoutesFromChildren, createSearchParams, generatePath, matchPath, matchRoutes, parsePath, renderMatches, resolvePath, unstable_HistoryRouter, useHref, useInRouterContext, useLinkClickHandler, useLocation, useMatch, useNavigate, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRoutes, 
useSearchParams)
- Tổ chức lại code theo các tuyến 
- Tổ chức lại code và tách ra thành các commpont : Như compnent Home
* thực hiện bên client 
 - cài  npm install formik --save : Nó xác thực dữ liệu của mình dễ dàng hơn ví dụ như bạn muốn gửi form bạn muốn cho người dùng nếu họ quên một trường , nó sẽ tự động làm điều đó cho bạn , nó tự động đưa ra những lỗi .  (Một thư viện quản lý form có thế Getting values in and out of form state ; Validation and error messages( xác thực và thông báo lỗi) ;Handling form submission (xử lý form)) 
https://youtu.be/oiNtnehlaTo
- formik : < Hay>
autocomplete="off" : đặt các dòng trong chế độ hoàn thành 
initialValues : giá trị ban đầu 
validate: xác thực 
- Cài đặt npm install -S yup
 + username: yup.string().min(3).max(255).required(), : ít nhân 3 ký tự và nhiều nhất 255 ký tự
+  
-






